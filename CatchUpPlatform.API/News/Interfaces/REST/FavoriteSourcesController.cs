using System.Net.Mime;
using CatchUpPlatform.API.News.Domain.Model.Queries;
using CatchUpPlatform.API.News.Domain.Services;
using CatchUpPlatform.API.News.Interfaces.REST.Resources;
using CatchUpPlatform.API.News.Interfaces.REST.Transform;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace CatchUpPlatform.API.News.Interfaces.REST;

/// <summary>
/// Favorite sources controller.
/// </summary>
/// <param name="favoriteSourceCommandService">The Favorite Source Command Service</param>
/// <param name="favoriteSourceQueryService">The Favorite Source Query Service</param>
[ApiController]
[Route("api/v1/[controller]")]
[Produces(MediaTypeNames.Application.Json)]
[Tags("Favorite Sources")]
public class FavoriteSourcesController(
    IFavoriteSourceCommandService favoriteSourceCommandService,
    IFavoriteSourceQueryService favoriteSourceQueryService)
    : ControllerBase
{
    /// <summary>
    /// Creates a favorite source. 
    /// </summary>
    /// <param name="resource">CreateFavoriteSourceResource resource</param>
    /// <returns>
    /// A response as an action result containing the created favorite source, or bad request if the favorite source was not created.
    /// </returns>
    [HttpPost]
    [SwaggerOperation(
        Summary = "Creates a favorite source",
        Description = "Creates a favorite source with a given News API Key and Source ID",
        OperationId = "CreateFavoriteSource")]
    [SwaggerResponse(201, "The favorite source was created", typeof(FavoriteSourceResource))]
    [SwaggerResponse(400, "The favorite source was not created")]
    [SwaggerResponse(409, "The favorite source already exists")]
    public async Task<ActionResult> CreateFavoriteSource([FromBody] CreateFavoriteSourceResource resource)
    {
        if (!ModelState.IsValid) return BadRequest(ModelState);
        var createFavoriteSourceCommand = CreateFavoriteSourceCommandFromResourceAssembler.ToCommandFromResource(resource);
        try
        {
            var result = await favoriteSourceCommandService.Handle(createFavoriteSourceCommand);
            if (result is null) return BadRequest();
            return CreatedAtAction(nameof(GetFavoriteSourceById), new { id = result.Id }, FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity(result));
        }
        catch (Exception ex) when (ex.Message.Contains("already exists"))
        {
            return Conflict("Favorite source with this SourceId already exists for the given NewsApiKey");
        }
        catch
        {
            return BadRequest();
        }
    }
    
    
    /// <summary>
    /// Gets all favorite sources by news API key. 
    /// </summary>
    /// <param name="newsApiKey">The News API Key generated by the service provider</param>
    /// <returns>
    /// A response as an action result containing the favorite sources, or not found if no favorite sources were found.
    /// </returns>
    private async Task<ActionResult> GetAllFavoriteSourcesByNewsApiKey(string newsApiKey)
    {
       var getAllFavoriteSourcesByNewsApiKeyQuery = new GetAllFavoriteSourcesByNewsApiKeyQuery(newsApiKey);
        var result = await favoriteSourceQueryService.Handle(getAllFavoriteSourcesByNewsApiKeyQuery);
        var resources = result.Select(FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity);
        return Ok(resources);
    }
    
    /// <summary>
    /// Gets a favorite source by news API key and source id. 
    /// </summary>
    /// <param name="newsApiKey">The News API Key generated by the news service provider</param>
    /// <param name="sourceId">The Source ID from the news service provider</param>
    /// <returns></returns>
    private async Task<ActionResult> GetFavoriteSourceByNewsApiKeyAndSourceId(string newsApiKey, string sourceId)
    {
        var getFavoriteSourceByNewsApiKeyAndSourceIdQuery = new GetFavoriteSourceByNewsApiKeyAndSourceIdQuery(newsApiKey, sourceId);
        var result = await favoriteSourceQueryService.Handle(getFavoriteSourceByNewsApiKeyAndSourceIdQuery);
        if (result is null) return NotFound();
        var resource = FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity(result);
        return Ok(resource);
    }
    
    /// <summary>
    /// Gets a favorite source according to parameters. 
    /// </summary>
    /// <param name="newsApiKey">The News API Key generated by the news service provider</param>
    /// <param name="sourceId">The Source ID from the news service provider</param>
    /// <returns>
    /// A response as an action result containing the favorite source if News API Key and Source ID are provided,
    /// or a response with the favorite sources for the News API Key if Source ID is not present.
    /// </returns>
    [HttpGet]
    [SwaggerOperation(
        Summary = "Gets a favorite source according to parameters",
        Description = "Gets a favorite source for given parameters",
        OperationId = "GetFavoriteSourceFromQuery")]
    [SwaggerResponse(200, "Result(s) was/were found", typeof(FavoriteSourceResource))]
    public async Task<ActionResult> GetFavoriteSourceFromQuery([FromQuery] string newsApiKey, [FromQuery] string sourceId = "")
    {
        return string.IsNullOrEmpty(sourceId)
            ? await GetAllFavoriteSourcesByNewsApiKey(newsApiKey)
            : await GetFavoriteSourceByNewsApiKeyAndSourceId(newsApiKey, sourceId);
    }
    
    /// <summary>
    /// Gets a favorite source by id. 
    /// </summary>
    /// <param name="id">The Favorite Source ID</param>
    /// <returns>
    /// A response as an action result containing the favorite source, or not found if the favorite source was not found.
    /// </returns>
    [HttpGet("{id}")]
    [SwaggerOperation(
        Summary = "Gets a favorite source by id",
        Description = "Gets a favorite source for a given favorite source identifier",
        OperationId = "GetFavoriteSourceById")]
    [SwaggerResponse(200, "The favorite source was found", typeof(FavoriteSourceResource))]
    public async Task<ActionResult> GetFavoriteSourceById(int id)
    {
        var getFavoriteSourceByIdQuery = new GetFavoriteSourceByIdQuery(id);
        var result = await favoriteSourceQueryService.Handle(getFavoriteSourceByIdQuery);
        if (result is null) return NotFound();
        var resource = FavoriteSourceResourceFromEntityAssembler.ToResourceFromEntity(result);
        return Ok(resource);
    }
}